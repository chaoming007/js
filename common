/*默认值*/
Object.extend = function (destination, source) {
    if (!destination) return source;
    for (var property in source) {
        if (!destination[property]) {
            destination[property] = source[property];
        }
    }
    return destination;
};

function rnd(n, m) {
    return Math.floor(Math.random() * (m + 1 - n) + n);
};

//时间比较大小
Date.prototype.compareValue || (Date.prototype.compareValue = function (date2) {
    var date1 = this;
    if (date1.getFullYear() > date2.getFullYear()) {
        return 1;
    } else if (date1.getFullYear() < date2.getFullYear()) {
        return -1;
    }

    if (date1.getDate() > date2.getDate()) {
        return 1;
    } else if (date1.getDate() < date2.getDate()) {
        return -1;
    }

    if (date1.getDay() > date2.getDay()) {
        return 1;
    } else if (date1.getDay() < date2.getDay()) {
        return -1;
    }

    if (date1.getHours() > date2.getHours()) {
        return 1;
    } else if (date1.getHours() < date2.getHours()) {
        return -1;
    }

    if (date1.getMinutes() > date2.getMinutes()) {
        return 1;
    } else if (date1.getMinutes() < date2.getMinutes()) {
        return -1;
    }

    if (date1.getSeconds() > date2.getSeconds()) {
        return 1;
    } else if (date1.getSeconds() < date2.getSeconds()) {
        return -1;
    }

    if (date1.getMilliseconds() > date2.getMilliseconds()) {
        return 1;
    } else if (date1.getMilliseconds() < date2.getMilliseconds()) {
        return -1;
    }

    return 0;
});


Date.prototype.getSubtractByHour || (Date.prototype.getSubtractByHour = function (date2) {
    var date1 = this;
    var d = date1.getDate() - date2.getDate();
    var h = date1.getHours() - date2.getHours();

    return h + d * 24;
});

//样式查找
document.deepCss = function (who, css) {
    if (!who || !who.style) return '';
    var sty = css.replace(/\-([a-z])/g, function (a, b) {
        return b.toUpperCase();
    });
    if (who.currentStyle) {
        return who.style[sty] || who.currentStyle[sty] || '';
    }
    var dv = document.defaultView || window;
    return who.style[sty] ||
    dv.getComputedStyle(who, "").getPropertyValue(css) || '';
};


//去重复
Array.prototype.distinct = function (options) {
    var setting = {
        contrast: function (json, i) { //判断表达式
            return !json[this[i]];
        },
        add: function (json, i) {
            json[this[i]] = 1;
        }
    }

    options = Object.extend(options, setting);

    var res = [];
    var json = {};

    for (var i = 0; i < this.length; i++) {
        if (this[i] && options.contrast.call(this, json, i)) {
            res.push(this[i]);
            options.add && options.add.call(this, json, i);
        }
    }
    return res;
};


//图片预加载
window.preload = function (options) {
    var setting = {
        is4G: false,
        time: 1200,
        progress: null,
        complete: null,
        fliterImg: function () {
            return $('img');
        },
        root: function () {
            return document.getElementsByTagName('*');
        }
    };
    options = Object.extend(options, setting);
    if (options.is4G) {
        function getallBgimages() {
            var url, B = [], A = options.root();
            A = B.slice.call(A, 0, A.length);
            while (A.length) {
                url = document.deepCss(A.shift(), 'background-image');
                if (url) url = /url\(['"]?([^")]+)/.exec(url) || [];
                url = url[1];
                if (url && B.indexOf(url) == -1) B[B.length] = url;
            }
            return B;
        }
        var arr = [], currentIdx = 0;
       
        //图片查找
        var imgs = options.fliterImg();
        for (var i = 0; i < imgs.length; i++) {
            console.log(imgs[i].src);
            arr.push({ src: imgs[i].src, type: 'img' });
        }

        var cssImages = getallBgimages();
        console.log(cssImages.length)
        for (var i = 0; i < cssImages.length; i++) {
            console.log(cssImages[i]);
            arr.push({ src: cssImages[i], type: 'img' });
        }

        var exists = {};
        var arr1 = arr.distinct({
            contrast: function (exists, i) {
                return !exists[this[i].src];
            },
            add: function (exists, i) {
                exists[this[i].src] = 1;
            }
        });


        ////视频 / 音频
        $('video,audio').each(function (index, curr) {
            arr1.push({ o: curr, type: 'media' });
        })


        //成功回调
        function callback() {
            options.progress && options.progress.call(this, currentIdx, arr1.length);
            if (currentIdx == arr1.length - 1) {
                options.progress && options.progress.call(this, arr1.length, arr1.length);
                options.complete && options.complete();
            }
            currentIdx++;
        }

        for (var i = 0; i < arr1.length; i++) {
            var curr = arr1[i];

            switch (curr.type) {
                case 'img':
                    $('<img>').attr('src', arr1[i].src).onload(function () {
                        callback.call(curr);
                    });
                    break;
                case 'media':
                    (function (o) {
                        o.addEventListener("canplay", function () {
                            callback.call(curr);
                            clearTimeout(o.timeout);
                        }, false);
                        clearTimeout(o.timeout);
                        o.timeout = setTimeout(function () {
                            callback.call(curr);
                        }, 5000);
                    })(curr.o);
                    break;
            }
        }
    } else {
        var r = rnd(0, 1);
        if (r == 1) {
            options.progress && options.progress.call(this, 100, 100);
            options.complete && options.complete();
        } else {
            var v = (100 * 30) / options.time;
            var i = 0;
            clearInterval(this.interval)
            this.interval = setInterval(function () {
                i += v;
                options.progress && options.progress.call(this, i, 100);
                if (i >= 100) {
                    clearInterval(this.interval)
                    options.complete && options.complete();
                }
            }, 30);
        }
    }
};


var classNames = ['Webkit', 'ms', 'Moz', 'O', ''];
var eventNames = ['webkit', 'moz', 'o'];

(function ($) {
    $.fn.onload = function (fnEnd) {
        var obj = this[0];
        obj.onload = function () {
            fnEnd && fnEnd.call(obj);
            obj.onreadystatechange = null;
        }
        obj.onreadystatechange = function (ev) {
            if (obj.readyState == 'complete') {
                fnEnd && fnEnd.call(obj);
                obj.onload = null;
            }
        }
        obj.onerror = function () {
            fnEnd && fnEnd.call(obj);
            obj.onreadystatechange = null;
            obj.onload = null;
        }
    }
    //添加css3样式
    $.fn.addClass3 = function (name, value) {
        var o = this[0];
        var cName = name.charAt(0).toUpperCase() + name.substring(1);
        for (var i = 0; i < classNames.length; i++) {
            o.style[classNames[i] + cName] = value;
        }
        return $(o);
    }

    //添加事件
    $.fn.addEvent = function (name, fn) {
        var obj = this[0];
        var cName = name.charAt(0).toUpperCase() + name.substring(1);
        for (var i = 0; i < eventNames.length; i++) {
            obj.addEventListener(eventNames[i] + cName, fn, false);
        }
        obj.addEventListener(name.charAt(0).toLowerCase() + name.substring(1), fn, false);
    }

    //删除事件
    $.fn.removeEvent = function (name, fn) {
        var obj = this[0];
        var cName = name.charAt(0).toUpperCase() + name.substring(1);
        for (var i = 0; i < eventNames.length; i++) {
            obj.removeEventListener(eventNames[i] + cName, fn, false);
        }
        obj.removeEventListener(name.charAt(0).toLowerCase() + name.substring(1), fn, false);
    }

    //触摸屏事件
    $.fn.touches = function (options) {
        var setting = {
            init: null,//初始化
            touchstart: null,  //按下
            touchmove: null, //滑动
            touchend: null //抬起
        };
        options = Object.extend(options, setting);
        var $this = this, touchesDiv = $this[0];
        if (!$this[0]) return;
        touchesDiv.addEventListener('touchstart', function (ev) {
            options.touchstart && options.touchstart.call($this, ev);
            function fnMove(ev) {
                options.touchmove && options.touchmove.call($this, ev);
            };

            function fnEnd(ev) {
                options.touchend && options.touchend.call($this, ev);
                document.removeEventListener('touchmove', fnMove, false);
                document.removeEventListener('touchend', fnEnd, false);
            };
            document.addEventListener('touchmove', fnMove, false);
            document.addEventListener('touchend', fnEnd, false);
            return false;
        }, false)
        options.init && options.init.call($this);
    }



    //transition事件监听
    $.fn.transitionEnd = function (options) {
        var setting = {
            listen: 'TransitionEnd',
            end: null
        }
        options = Object.extend(options, setting);
        var $this = this;
        function seatTransitionEnd() {
            for (var i = 0; i < eventNames.length; i++) {
                if (eventNames[i] == 'moz') {
                    $this.removeEvent(options.listen.toLocaleLowerCase(), seatTransitionEnd);
                } else {
                    $this.removeEvent(eventNames[i] + options.listen, seatTransitionEnd);
                }
            }
            options.end && options.end.call($this);
        }
        for (var i = 0; i < eventNames.length; i++) {
            if (eventNames[i] == 'moz') {
                $this.addEvent(options.listen.toLocaleLowerCase(), seatTransitionEnd);
            } else {
                $this.addEvent(eventNames[i] + options.listen, seatTransitionEnd);
            }
        }
    }

    //右侧弹出层
    $.fn.rightSwipeAction = function (options) {
        var setting = {
            show: 'swipeLeft-block',
            clickEnd: null
        };
        options = Object.extend(options, setting);
        var $child = $(this.children(1)), display = 'none';
        if ($child.hasClass(options.show)) {
            display = 'none';
        } else {
            display = 'block';
        }
        options.clickEnd && options.clickEnd.call($child, display);
    };

    //右侧附加选择层插件
    $.fn.rightSwipe = function (options, $click) {
        var $temp = null;
        var setting = {
            isclick: null,
            zindex: 999999,
            back: '.leftmask',
            alert: '.leftPopup',
            clickEnd: null, //打开关闭层回调事件
            oneEnd: null,
            closeEnd: null,
            currentid: null,
            selected: false, ///如果为真，查找currentid是否相等，如果符合就触发回调事件
            onBeforeScrollStart: function (ev) {
                ev.preventDefault();
            },
            clickCallBack: function (clickEnd) { //点击默认回调方法
                clickEnd.call(this);
            }
        };

        function clickEnd() {
            var $this = this;
            var $leftPopup = $(options.alert + '.' + $this.attr('data-action'));
            options.zindex = !$leftPopup.attr('data-zindex') ? options.zindex : parseInt($leftPopup.attr('data-zindex'));
            $leftPopup[0].style.zIndex = options.zindex;
            options.oneEnd && options.oneEnd.call($leftPopup);
            var $back = $('.' + $leftPopup.attr('data-back'));
            $back.count = 0;
            if ($back.length > 0) {
                $back.css('z-index', options.zindex - 10000);
                $back.show();
            }
            $leftPopup.rightSwipeAction({
                clickEnd: function (display) {
                    if (display != 'none') {
                        isopen = true;
                        var $swipeLeft = $leftPopup.find('.swipeLeft');
                        $leftPopup.show();
                        setTimeout(function () { $swipeLeft.addClass('swipeLeft-block'); setTimeout(function () { $this.clicked = false; }, 500); }, 200);

                        if ($back.length > 0) {
                            $back.parents('body').css('overflow', 'hidden');
                            function closeEnd(ev, params) {
                                if (!params || !params.leftPopup) {
                                    setTimeout(function () {
                                        $(options.back).each(function (index, curr) {
                                            curr.style.display = 'none';
                                        })
                                    }, 300);
                                    var $alert = $(options.alert).children().removeClass('swipeLeft-block').end();
                                    $back.parents('body').css('overflow', 'inherit');
                                    setTimeout(function () { $alert.hide(); }, 200);

                                    options.closeEnd && options.closeEnd.call($swipeLeft, $back);

                                } else {
                                    var $alert = params.leftPopup.children().removeClass('swipeLeft-block').end();
                                    setTimeout(function () { $alert.hide(); params.leftPopup[0].style.display = 'none'; }, 200);
                                    options.closeEnd && options.closeEnd.call(params.leftPopup.children(), $back);
                                }
                            }
                            if (!$back.attr('data-close')) {
                                $back.on('close', closeEnd);
                                $back.touches({
                                    touchstart: function () {
                                        $back.trigger('close');
                                        $back.trigger('closeEnd');
                                    }
                                });
                            }
                            $back.attr('data-close', 'true');
                        }
                        $swipeLeft.transitionEnd({ end: function () { options.clickEnd && options.clickEnd.call($leftPopup, true, $this); } });
                    } else {
                        options.clickEnd && options.clickEnd.call($leftPopup, true, $this);
                    }
                }
            });
        }

        options = Object.extend(options, setting);
        if (this.length == 0) { return; }
        if (!$click) {
            this.each(function (index, curr) {
                var $curr = $(curr);
                (function ($this) {
                    $this.isclick = true;
                    $this.click(function (ev) {
                        if ($this.clicked) { ev.pDefault(); return; }
                        $this.clicked = true;
                        options.onBeforeScrollStart.call($this, ev);

                        options.isclick && ($this.isclick = options.isclick.call($this));
                        if ($this.isclick == false) {
                            return;
                        }
                        options.clickCallBack.call($this, clickEnd);
                    })
                    //查找默认选中值，如果符合就触发回调事件
                    if (options.selected && options.currentid && options.currentid.toString() == $curr.attr('data-id')) {
                        options.clickCallBack.call($this, clickEnd);
                        return;
                    }
                })($curr);
            });
        } else {
            options.clickCallBack.call($click, clickEnd);
        }
    }

    //选中tab
    $.fn.tabCurrent = function (options) {
        var setting = {
            currentName: 'current',
            setVal: function (setVal) {
                this.parent().parent().scrollLeft(setVal);
            }
        }
        options = Object.extend(options, setting);
        var win_W = $(window).width();
        this.each(function (index, curr) {
            var $current = $(curr);
           
            if ($current.hasClass(options.currentName)) {
                var objVal = $current.offset().left;
                if (objVal > win_W / 2) {
                    var setVal = (objVal - 58) - (win_W / 2 - 58);
                    options.setVal.call($current, setVal);
                }
            }
        })
    }

    //过期时间回调
    $.fn.clock = function (options) {
        var setting = {
            localName: 'chezhan',
            expire: 6, //小时
            end: null
        }
        options = Object.extend(options, setting);
        var $root = this;
        var now = new Date();
        var v = localStorage.getItem(options.localName);
        var b = false;
        if (options.expire == -1) {
            options.end && options.end.call($root);
        }
        else if (options.expire > 0) {
            if (!v) {
                b = true;
            } else if (now.getSubtractByHour(new Date(v)) > options.expire) {
                b = true;
            }
        }

        if (b) {
            options.end && options.end.call($root);
            localStorage.setItem(options.localName, now.getFullYear() + '-' + now.getMonth() + '-' + now.getDate() + ' ' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds());
        }
    }
})(jQuery);

$(function () {
    //var $body = $(document.body);
    ////右侧弹层
    //$body.find('.lnk-menu').click(function (ev) {
    //    ev.preventDefault();
    //    var $click = $(this);
    //    var mark = $body.find('.right-mark'),
    //    $model = $body.find('.right-menu'),
    //    options = {
    //        clickEnd: function () {
    //            var $this = this;
    //            $this.find('.swipeLeft-menu-close').click(function (ev) {
    //                ev.preventDefault();
    //                mark.trigger('close');
    //            });
    //            $model.touches({ touchmove: function (ev) { ev.preventDefault(); } })
    //        },
    //        back: '.rightmask',
    //        alert: '.rightPopup',
    //        zindex: 99999
    //    }
    //    $model.rightSwipe(options, $click);
    //})
});

window.addEventListener('touchmove', function () { });
